/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pixelshop;


import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.FontFormatException;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.NumberFormat;
import java.util.Locale;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import static javax.swing.JFrame.EXIT_ON_CLOSE;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;import java.text.NumberFormat;
import java.util.Locale;


/**
 *
 * @author redmibook
 */
public class cart extends javax.swing.JFrame {

    /**
     * Creates new form DashKepala
     */
    public cart() {
       setTitle("Fixed Size Window");

        // Set fixed window size
        setSize(1440, 720); // Width = 800px, Height = 600px

        // Center the window on the screen
        setLocationRelativeTo(null);

        setResizable(false);

        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setVisible(true);
        initComponents();
        loadCartItems();
        try {
            Font Text = Font.createFont(Font.TRUETYPE_FONT, new File("src/fonts/DeterminationSansWebRegular-369X.ttf")).deriveFont(30f);
            Font DialogText = Font.createFont(Font.TRUETYPE_FONT, new File("src/fonts/DeterminationSansWebRegular-369X.ttf")).deriveFont(18f);
            Font Heading = Font.createFont(Font.TRUETYPE_FONT, new File("src/fonts/DeterminationSansWebRegular-369X.ttf")).deriveFont(50f);
        Cancel.setFont(Text);
        CheckOut.setFont(Text);
        Discard.setFont(Text);
        jList1.setFont(Text);
        Title.setFont(Heading);
        Total.setFont(Heading);
        jList1.setCellRenderer(new DefaultListCellRenderer() {
    public Component getListCellRendererComponent(JList<?> list, Object value, int index,
                                                  boolean isSelected, boolean cellHasFocus) {
        JLabel label = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
        String originalText = value.toString();
        label.setText("* " + originalText);
        if (isSelected) {
            label.setBackground(Color.BLACK);
            label.setForeground(Color.YELLOW);   
        } else {
            label.setBackground(Color.BLACK); // Custom selected bg
            label.setForeground(Color.WHITE);   
        
        }
        label.setFont(Text);
        label.setBorder(null);
        return label;
    }
});
        } catch (FontFormatException | IOException e) {
            e.printStackTrace();
        }
        
    }
    

// ...

private void loadCartItems() {
    try {
        Connection conn = koneksi.getKoneksi();
        String sql = "SELECT p.nama, p.harga FROM cart c JOIN produk p ON c.id_produk = p.id_produk WHERE c.id_customer = ?";
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.setInt(1, User.currentUserId);
        ResultSet rs = stmt.executeQuery();

        DefaultListModel<String> productModel = new DefaultListModel<>();
        int totalHarga = 0;

        while (rs.next()) {
            String name = rs.getString("nama");
            int price = rs.getInt("harga");
            totalHarga += price;

            // No currency format for item rows
            productModel.addElement(name + " -- Rp " + price);
        }

        jList1.setModel(productModel);

        // Format total with no decimals
        NumberFormat rupiahFormat = NumberFormat.getCurrencyInstance(new Locale("id", "ID"));
        rupiahFormat.setMaximumFractionDigits(0); // ðŸ‘ˆ removes decimal part
        rupiahFormat.setMinimumFractionDigits(0);

        String formattedTotal = rupiahFormat.format(totalHarga);
        Total.setText("Total: " + formattedTotal);

    } catch (SQLException e) {
        e.printStackTrace();
    }
}


     
     


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Total = new javax.swing.JLabel();
        CategoryList = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        Title = new javax.swing.JLabel();
        Discard = new javax.swing.JButton();
        CheckOut = new javax.swing.JButton();
        Cancel = new javax.swing.JButton();
        DialogBox = new javax.swing.JLabel();
        Background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1440, 720));

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Total.setFont(new java.awt.Font("Lucida Calligraphy", 1, 60)); // NOI18N
        Total.setForeground(new java.awt.Color(255, 255, 255));
        Total.setText("Total.");
        jPanel1.add(Total, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 540, 550, 130));

        CategoryList.setBorder(null);

        jList1.setBackground(new java.awt.Color(0, 0, 0));
        jList1.setForeground(new java.awt.Color(255, 255, 255));
        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        CategoryList.setViewportView(jList1);

        jPanel1.add(CategoryList, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 170, 770, 460));

        Title.setFont(new java.awt.Font("Lucida Calligraphy", 1, 60)); // NOI18N
        Title.setForeground(new java.awt.Color(255, 255, 255));
        Title.setText("YOUR CART");
        jPanel1.add(Title, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 40, 550, 130));

        Discard.setBackground(new java.awt.Color(255, 255, 255,0));
        Discard.setFont(new java.awt.Font("Rubik", 0, 24)); // NOI18N
        Discard.setForeground(new java.awt.Color(255, 255, 255));
        Discard.setText("* DISCARD");
        Discard.setBorder(null);
        Discard.setBorderPainted(false);
        Discard.setFocusPainted(false);
        Discard.setFocusable(false);
        Discard.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Discard.setOpaque(false);
        Discard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                DiscardMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                DiscardMouseExited(evt);
            }
        });
        Discard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DiscardActionPerformed(evt);
            }
        });
        jPanel1.add(Discard, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 470, 180, 30));

        CheckOut.setBackground(new java.awt.Color(255, 255, 255,0));
        CheckOut.setFont(new java.awt.Font("Rubik", 0, 24)); // NOI18N
        CheckOut.setForeground(new java.awt.Color(255, 255, 255));
        CheckOut.setText("* CHECKOUT");
        CheckOut.setBorder(null);
        CheckOut.setBorderPainted(false);
        CheckOut.setFocusPainted(false);
        CheckOut.setFocusable(false);
        CheckOut.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        CheckOut.setOpaque(false);
        CheckOut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                CheckOutMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                CheckOutMouseExited(evt);
            }
        });
        CheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckOutActionPerformed(evt);
            }
        });
        jPanel1.add(CheckOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 530, 180, 30));

        Cancel.setBackground(new java.awt.Color(255, 255, 255,0));
        Cancel.setFont(new java.awt.Font("Rubik", 0, 24)); // NOI18N
        Cancel.setForeground(new java.awt.Color(255, 255, 255));
        Cancel.setText("* BACK");
        Cancel.setBorder(null);
        Cancel.setBorderPainted(false);
        Cancel.setFocusPainted(false);
        Cancel.setFocusable(false);
        Cancel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Cancel.setOpaque(false);
        Cancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                CancelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                CancelMouseExited(evt);
            }
        });
        Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelActionPerformed(evt);
            }
        });
        jPanel1.add(Cancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 590, 130, 30));

        DialogBox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pixelshop/cartbox.png"))); // NOI18N
        DialogBox.setText("jLabel3");
        jPanel1.add(DialogBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1440, -1));

        Background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pixelshop/download.gif"))); // NOI18N
        jPanel1.add(Background, new org.netbeans.lib.awtextra.AbsoluteConstraints(-80, -490, 2110, 1620));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1440, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 720, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CancelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CancelMouseEntered
        // TODO add your handling code here:
        Cancel.setForeground(new java.awt.Color(255, 239, 0));
    }//GEN-LAST:event_CancelMouseEntered

    private void CancelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CancelMouseExited
        // TODO add your handling code here:
        Cancel.setForeground(new java.awt.Color(255, 255, 255));
    }//GEN-LAST:event_CancelMouseExited

    private void CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelActionPerformed
        // TODO add your handling code here:
        new indoor().show();
        this.dispose();
    }//GEN-LAST:event_CancelActionPerformed

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged

    }//GEN-LAST:event_jList1ValueChanged

    private void CheckOutMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CheckOutMouseEntered
        // TODO add your handling code here:
        CheckOut.setForeground(new java.awt.Color(255, 239, 0));
    }//GEN-LAST:event_CheckOutMouseEntered

    private void CheckOutMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CheckOutMouseExited
        // TODO add your handling code here:
        CheckOut.setForeground(new java.awt.Color(255, 255, 255));
    }//GEN-LAST:event_CheckOutMouseExited

    private void CheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckOutActionPerformed
        // TODO add your handling code here:
         Connection conn = null;
PreparedStatement insertNotaStmt = null;
PreparedStatement getCartStmt = null;
PreparedStatement insertTransaksiStmt = null;
PreparedStatement clearCartStmt = null;

try {
    conn = koneksi.getKoneksi();
    conn.setAutoCommit(false); // Enable transaction

    // âœ… Step 1: Get all products in the user's cart
    String getCartSQL = "SELECT p.id_produk, p.harga, p.id_supplier FROM cart c JOIN produk p ON c.id_produk = p.id_produk WHERE c.id_customer = ?";
    getCartStmt = conn.prepareStatement(getCartSQL);
    getCartStmt.setInt(1, User.currentUserId);
    ResultSet rs = getCartStmt.executeQuery();

    // ðŸš« Check if cart is empty
    if (!rs.isBeforeFirst()) {
        JOptionPane.showMessageDialog(this, "Are you trying to give me money for free?");
        return;
    }

    // âœ… Step 2: Insert into nota
    String insertNotaSQL = "INSERT INTO nota (order_time, receive_time, status) VALUES (NOW(), NULL, '1')";
    insertNotaStmt = conn.prepareStatement(insertNotaSQL, Statement.RETURN_GENERATED_KEYS);
    insertNotaStmt.executeUpdate();

    ResultSet notaKeys = insertNotaStmt.getGeneratedKeys();
    int insertedNotaId = 0;
    if (notaKeys.next()) {
        insertedNotaId = notaKeys.getInt(1); // get id_nota
    } else {
        throw new SQLException("Failed to retrieve nota ID.");
    }

    // âœ… Step 3: Re-execute cart query (because first ResultSet is now exhausted)
    rs = getCartStmt.executeQuery(); // run it again

   String insertTransaksiSQL = "INSERT INTO transaksi (id_customer, id_produk, total, id_supplier, id_nota, status) VALUES (?, ?, ?, ?, ?, ?)";
insertTransaksiStmt = conn.prepareStatement(insertTransaksiSQL);


    while (rs.next()) {
        int idProduk = rs.getInt("id_produk");
        int harga = rs.getInt("harga");
        int idSupplier = rs.getInt("id_supplier");

        insertTransaksiStmt.setInt(1, User.currentUserId);
        insertTransaksiStmt.setInt(2, idProduk);
        insertTransaksiStmt.setInt(3, harga);
        insertTransaksiStmt.setInt(4, idSupplier);
        insertTransaksiStmt.setInt(5, insertedNotaId);
         insertTransaksiStmt.setInt(6, 0); // âš¡ Set default status to 0 (Pending)
        insertTransaksiStmt.addBatch();
    }

    insertTransaksiStmt.executeBatch(); // Execute all inserts

    // âœ… Step 4: Clear the cart
    String clearCartSQL = "DELETE FROM cart WHERE id_customer = ?";
    clearCartStmt = conn.prepareStatement(clearCartSQL);
    clearCartStmt.setInt(1, User.currentUserId);
    clearCartStmt.executeUpdate();

    conn.commit(); // âœ… Commit everything

    // âœ… Go to next page
    indoor indoorPage = new indoor();
    indoorPage.showThankYouMessage();
    indoorPage.showNota(insertedNotaId); 
    indoorPage.setVisible(true);
    this.dispose();

} catch (SQLException e) {
    try {
        if (conn != null) conn.rollback();
    } catch (SQLException rollbackEx) {
        rollbackEx.printStackTrace();
    }
    e.printStackTrace();
    JOptionPane.showMessageDialog(this, "Checkout failed: " + e.getMessage());
} finally {
    try { if (insertNotaStmt != null) insertNotaStmt.close(); } catch (Exception e) {}
    try { if (getCartStmt != null) getCartStmt.close(); } catch (Exception e) {}
    try { if (insertTransaksiStmt != null) insertTransaksiStmt.close(); } catch (Exception e) {}
    try { if (clearCartStmt != null) clearCartStmt.close(); } catch (Exception e) {}
    try { if (conn != null) conn.setAutoCommit(true); } catch (Exception e) {}
}

    }//GEN-LAST:event_CheckOutActionPerformed

    private void DiscardMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DiscardMouseEntered
        // TODO add your handling code here:
        Discard.setForeground(new java.awt.Color(255, 239, 0));
    }//GEN-LAST:event_DiscardMouseEntered

    private void DiscardMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DiscardMouseExited
        // TODO add your handling code here:
        Discard.setForeground(new java.awt.Color(255, 255, 255));
    }//GEN-LAST:event_DiscardMouseExited

    private void DiscardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DiscardActionPerformed
        // TODO add your handling code here:
         int selectedIndex = jList1.getSelectedIndex();
    
    if (selectedIndex == -1) {
        JOptionPane.showMessageDialog(this, "Nothing in your cart.");
        return;
    }

    String selectedValue = jList1.getSelectedValue();
    if (selectedValue == null || !selectedValue.contains("--")) {
        JOptionPane.showMessageDialog(this, "Format item tidak valid.");
        return;
    }

    // Extract nama produk
    String productName = selectedValue.split("--")[0].trim().replace("*", "").trim();

    try {
        Connection conn = koneksi.getKoneksi();
        String query = "DELETE FROM cart WHERE id_customer = ? AND id_produk = (SELECT id_produk FROM produk WHERE nama = ? LIMIT 1)";
        PreparedStatement stmt = conn.prepareStatement(query);
        stmt.setInt(1, User.currentUserId);
        stmt.setString(2, productName);
        
        int affected = stmt.executeUpdate();
        if (affected > 0) {
            JOptionPane.showMessageDialog(this, "Aw man, not to your liking?.");
            loadCartItems();
        } else {
            JOptionPane.showMessageDialog(this, "Gagal menghapus item. Mungkin data tidak ditemukan.");
        }

        stmt.close();
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + e.getMessage());
    }
    }//GEN-LAST:event_DiscardActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(cart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(cart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(cart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(cart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new cart().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Background;
    private javax.swing.JButton Cancel;
    private javax.swing.JScrollPane CategoryList;
    private javax.swing.JButton CheckOut;
    private javax.swing.JLabel DialogBox;
    private javax.swing.JButton Discard;
    private javax.swing.JLabel Title;
    private javax.swing.JLabel Total;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
